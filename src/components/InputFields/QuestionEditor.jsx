import React, { useContext, useState } from "react";
import {
	Typography,
	TextField,
	FormControl,
	IconButton,
	Tooltip,
} from "@mui/material";
import SmartToyIcon from "@mui/icons-material/SmartToy";
import { GlobalContext } from "@/contexts/GlobalContext";
import ContextGeneratorService from "@/services/contextGeneratorService";
import { showError } from "@/contexts/ToastProvider";
import gptApi from "@/api/gptApi";

export default function QuestionEditor() {
	const { query, setQuery } = useContext(GlobalContext);
	const [isGenerating, setIsGenerating] = useState(false);
	const { context } = useContext(GlobalContext);
	const handleGenerateQuestion = async () => {
		setIsGenerating(true);
		const text = ContextGeneratorService.convertContextToText(context);
		if (text === "") {
			showError("Context is empty. Please generate context first.");
		} else {
			const res = await gptApi.generateQuestion(text);
			if (res.success) {
				setQuery((prev) => ({
					...prev,
					question: res.data,
				}));
			} else {
				showError(res.message);
			}
		}
		setIsGenerating(false);
	};

	return (
		<FormControl fullWidth>
			<Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
				Question:
			</Typography>
			<div style={{ position: "relative" }}>
				<TextField
					fullWidth
					placeholder="Write a question based on context..."
					value={query.question}
					onChange={(e) =>
						setQuery((prev) => ({
							...prev,
							question: e.target.value,
						}))
					}
					multiline
					required
					minRows={4}
				/>
				<Tooltip title="Generate Question with AI">
					<IconButton
						onClick={handleGenerateQuestion}
						disabled={isGenerating}
						sx={{
							position: "absolute",
							right: 8,
							bottom: 8,
							backgroundColor: "primary.main",
							color: "white",
							"&:hover": {
								backgroundColor: "primary.dark",
							},
							width: 40,
							height: 40,
						}}
					>
						<SmartToyIcon />
					</IconButton>
				</Tooltip>
			</div>
		</FormControl>
	);
}

// Placeholder function for AI question generation
async function generateQuestionWithAI() {
	await new Promise((resolve) => setTimeout(resolve, 1000));
	return "This is a placeholder question generated by AI. Replace this with your actual AI-generated question.";
}
