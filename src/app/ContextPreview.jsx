"use client";

import React, { useEffect, useState } from "react";
import PlaceApi from "@/api/placeApi";
const placeApi = new PlaceApi();
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import OutlinedInput from "@mui/material/OutlinedInput";
import { Select, MenuItem, Button, TextField } from "@mui/material";

export default function ContextPreview({
	savedPlacesMap,
	selectedPlacesMap,
	distanceMatrix,
	nearbyPlacesMap,
	setContext,
	setContextJSON,
	context,
}) {
	const placeToContext = (place_id) => {
		let place = savedPlacesMap[place_id];
		let attributes = selectedPlacesMap[place_id].selectedAttributes;
		let text = "";

		if (
			attributes.includes("formatted_address") ||
			(attributes.includes("geometry") && place.geometry.location)
		) {
			const lat =
				typeof place.geometry.location.lat === "function"
					? place.geometry.location.lat()
					: place.geometry.location.lat;
			const lng =
				typeof place.geometry.location.lng === "function"
					? place.geometry.location.lng()
					: place.geometry.location.lng;
			text += `Location: ${
				attributes.includes("formatted_address")
					? place.formatted_address
					: ""
			}${
				attributes.includes("geometry")
					? "(" + lat + ", " + lng + ")"
					: ""
			}. `;
		}
		if (attributes.includes("opening_hours")) {
			text += `Open: ${place.opening_hours.weekday_text.join(", ")}. `;
		}
		if (attributes.includes("rating")) {
			text += `Rating: ${place.rating}. (${place.user_ratings_total} ratings). `;
		}

		if (attributes.includes("reviews")) {
			text += `Reviews: ${place.reviews.map((review) => {
				return `${review.author_name} (${review.rating}): ${review.text}`;
			})} `;
		}
		if (attributes.includes("price_level")) {
			// - 0 Free
			// - 1 Inexpensive
			// - 2 Moderate
			// - 3 Expensive
			// - 4 Very Expensive
			// Convert price level from number to string

			let priceLevel = "";
			const priceMap = [
				"Free",
				"Inexpensive",
				"Moderate",
				"Expensive",
				"Very Expensive",
			];

			text += `Price Level: ${priceMap[place.price_level]}. `;
		}

		if (attributes.includes("delivery")) {
			text += place.delivery
				? "Delivery Available. "
				: "Delivery Not Available. ";
		}

		if (attributes.includes("dine_in")) {
			text += place.dine_in
				? "Dine In Available. "
				: "Dine In Not Available. ";
		}

		if (attributes.includes("takeaway")) {
			text += place.takeaway
				? "Takeaway Available. "
				: "Takeaway Not Available. ";
		}

		if (attributes.includes("reservable")) {
			text += place.reservable ? "Reservable. " : "Not Reservable. ";
		}

		if (attributes.includes("wheelchair_accessible_entrance")) {
			text += place.wheelchair_accessible_entrance
				? "Wheelchair Accessible Entrance. "
				: "Not Wheelchair Accessible Entrance. ";
		}

		return text;
	};

	return (
		Object.keys(selectedPlacesMap).length > 0 && (
			<div className="flex flex-col border-4 w-full border-black rounded-lg">
				<div className="flex flex-col items-center bg-black">
					<h1 className="text-3xl text-white">Generated Context</h1>
					<p className="text-lg text-white">
						Context generated by our system
					</p>
				</div>
				<div className="p-2 flex flex-col gap-2 w-full">
					{context.map((text, index) => (
						<h1 key={index} className="w-full text-left">
							{text}
						</h1>
					))}
				</div>
				<div className="flex flex-row w-full gap-2 p-2">
					{/* <Button
              className="bg-blue-500 rounded-lg p-2 my-2 w-full"
              onClick={() => {
                navigator.clipboard.writeText(
                  context.reduce((acc, e) => acc + e + "\n", "")
                );
              }}
              variant="contained"
            >
              Copy
            </Button> */}
					{/* <Button
						className="bg-blue-500 rounded-lg p-2 my-2 w-full"
						onClick={() => {
							// From selected places generate context
							let newContext = [];
							Object.keys(selectedPlacesMap).forEach(
								(place_id) => {
									const text = placeToContext(place_id);
									if (text !== "")
										newContext.push(
											`Information of ${
												selectedPlacesMap[place_id]
													.alias ||
												savedPlacesMap[place_id].name
											}: ${text}`
										);
								}
							);

							Object.keys(distanceMatrix).forEach(
								(from_id, index) => {
									Object.keys(
										distanceMatrix[from_id]
									).forEach((to_id, index) => {
										Object.keys(
											distanceMatrix[from_id][to_id]
										).forEach((mode) => {
											newContext.push(
												`${mode} Distance from ${
													selectedPlacesMap[from_id]
														.alias ||
													savedPlacesMap[from_id].name
												} to ${
													selectedPlacesMap[to_id]
														.alias ||
													savedPlacesMap[to_id].name
												} is ${
													distanceMatrix[from_id][
														to_id
													][mode].distance
												} (${
													distanceMatrix[from_id][
														to_id
													][mode].duration
												}).`
											);
										});
									});
								}
							);

							Object.keys(nearbyPlacesMap).forEach(
								(place_id, index) => {
									nearbyPlacesMap[place_id].forEach((e) => {
										newContext.push(
											`Nearby places of ${
												selectedPlacesMap[place_id]
													.alias ||
												savedPlacesMap[place_id].name
											} ${
												e.type === "any"
													? ""
													: 'of type "' + e.type + '"'
											} ${
												e.keyword !== ""
													? 'with keyword "' +
													  e.keyword +
													  '"'
													: ""
											} are (${
												e.hasRadius
													? "in " +
													  e.radius +
													  " m radius"
													: "ranked by distance"
											}):`
										);
										e.places.forEach(
											(near_place_id, index) => {
												newContext.push(
													`${index + 1}. ${
														selectedPlacesMap[
															near_place_id
														]?.alias ||
														savedPlacesMap[
															near_place_id
														].name
													} | ${
														savedPlacesMap[
															near_place_id
														].formatted_address
													}`
												);
											}
										);
									});
								}
							);
							setContext(newContext);

							console.log({
								distance_matrix: distanceMatrix,
								places: selectedPlacesMap,
								nearby_places: nearbyPlacesMap,
							});

							setContextJSON({
								distance_matrix: distanceMatrix,
								places: selectedPlacesMap,
								nearby_places: nearbyPlacesMap,
							});
						}}
						variant="contained"
					>
						Generate
					</Button> */}
				</div>
			</div>
		)
	);
}
