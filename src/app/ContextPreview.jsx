"use client";

import React, { useEffect, useState } from "react";
import PlaceApi from "@/api/placeApi";
const placeApi = new PlaceApi();
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import OutlinedInput from "@mui/material/OutlinedInput";
import { Select, MenuItem, Button, TextField } from "@mui/material";

export default function ContextPreview({
	savedPlacesMap,
	selectedPlacesMap,
	distanceMatrix,
	nearbyPlacesMap,
	setContext,
	setContextJSON,
	context,
}) {
	const placeToContext = (place_id) => {
		let place = savedPlacesMap[place_id];
		let attributes = selectedPlacesMap[place_id].selectedAttributes;
		let text = "";

		if (
			attributes.includes("formatted_address") ||
			(attributes.includes("geometry") && place.geometry.location)
		) {
			const lat =
				typeof place.geometry.location.lat === "function"
					? place.geometry.location.lat()
					: place.geometry.location.lat;
			const lng =
				typeof place.geometry.location.lng === "function"
					? place.geometry.location.lng()
					: place.geometry.location.lng;
			text += `Location: ${
				attributes.includes("formatted_address")
					? place.formatted_address
					: ""
			}${
				attributes.includes("geometry")
					? "(" + lat + ", " + lng + ")"
					: ""
			}. `;
		}
		if (attributes.includes("opening_hours")) {
			text += `Open: ${place.opening_hours.weekday_text.join(", ")}. `;
		}
		if (attributes.includes("rating")) {
			text += `Rating: ${place.rating}. (${place.user_ratings_total} ratings). `;
		}

		if (attributes.includes("reviews")) {
			text += `Reviews: ${place.reviews.map((review) => {
				return `${review.author_name} (${review.rating}): ${review.text}`;
			})} `;
		}
		if (attributes.includes("price_level")) {
			// - 0 Free
			// - 1 Inexpensive
			// - 2 Moderate
			// - 3 Expensive
			// - 4 Very Expensive
			// Convert price level from number to string

			let priceLevel = "";
			const priceMap = [
				"Free",
				"Inexpensive",
				"Moderate",
				"Expensive",
				"Very Expensive",
			];

			text += `Price Level: ${priceMap[place.price_level]}. `;
		}

		if (attributes.includes("delivery")) {
			text += place.delivery
				? "Delivery Available. "
				: "Delivery Not Available. ";
		}

		if (attributes.includes("dine_in")) {
			text += place.dine_in
				? "Dine In Available. "
				: "Dine In Not Available. ";
		}

		if (attributes.includes("takeaway")) {
			text += place.takeaway
				? "Takeaway Available. "
				: "Takeaway Not Available. ";
		}

		if (attributes.includes("reservable")) {
			text += place.reservable ? "Reservable. " : "Not Reservable. ";
		}

		if (attributes.includes("wheelchair_accessible_entrance")) {
			text += place.wheelchair_accessible_entrance
				? "Wheelchair Accessible Entrance. "
				: "Not Wheelchair Accessible Entrance. ";
		}

		return text;
	};

	return (
		// Object.keys(selectedPlacesMap).length > 0 &&
		<div className="flex flex-col border-4 w-full border-black rounded-lg">
			<div className="flex flex-col items-center bg-black text-center pb-2">
				<h1 className="text-xl md:text-3xl text-white">
					Generated Context
				</h1>
				<p className="text-sm md:text-lg text-zinc-300">
					Context generated by our system
				</p>
			</div>
			<div className="p-2 flex flex-col gap-2 w-full min-h-16">
				{context.length > 0 ? (
					context.map((text, index) => (
						<p
							key={index}
							className="w-full text-left"
							dangerouslySetInnerHTML={{
								__html: text,
							}}
						/>
					))
				) : (
					<p className="text-center my-auto text-xl text-zinc-400">
						No context generated. Add information below.
					</p>
				)}
			</div>
		</div>
	);
}
